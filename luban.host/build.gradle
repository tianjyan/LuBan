import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'me.tatarka.retrolambda'

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    Calendar date = new GregorianCalendar();
    date.set(Calendar.HOUR_OF_DAY, 0);
    date.set(Calendar.MINUTE, 0);
    date.set(Calendar.SECOND, 0);
    date.set(Calendar.MILLISECOND, 0);
    return df.format(date.getTime())
}

android {
    compileSdkVersion versions.targetSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "org.tianjyan.luban.host"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        buildConfigField "boolean", "ENABLE_LEAK_CANARY", "false"
        buildConfigField "String", "GIT_COMMIT_SHA", '"' + gitSha() + '"'
        buildConfigField "String", "BUILD_TIME", '"' + buildTime() + '"'
        // vectorDrawables.useSupportLibrary = true
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
    buildTypes {
        debugMemoryLeak {
            initWith debug
            buildConfigField "boolean", "ENABLE_LEAK_CANARY", "true"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile libs.aidl
    compile libs.abs
    compile libs.client
    compile libs.crash
    compile libs.loging

    compile libs.common
    compile libs.floating
    compile libs.ip
    compile libs.log
    compile libs.op
    compile libs.logcat

    annotationProcessor libs.butterknifecompiler
    annotationProcessor libs.daggercompiler
    annotationProcessor libs.daggerprocessor

    compile libs.appcompat
    compile libs.supportv4
    compile libs.recyclerview

    compile libs.butterknife
    compile libs.dagger
    compile libs.daggerandroid
    compile libs.eventbus

    compile libs.stetho
    testCompile libs.leakcanarytest
    debugCompile libs.leakcanarydebug
    debugMemoryLeakCompile libs.leakcanarydebugMemoryLeak
}

task styleCheck(type: Checkstyle) {
    configFile new File(rootDir, "config/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**', '**/mobeta/**'

    classpath = files()
}